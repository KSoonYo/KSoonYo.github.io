{"version":3,"file":"component---src-pages-using-typescript-tsx-8c780fbec853a5d4439f.js","mappings":"oNAaA,MA+BaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAjCwDC,IAAAA,IAAC,KACvDC,EAAI,KACJC,EAAI,SACJC,GACD,SACCN,EAAAA,cAACO,EAAAA,EAAM,CAACL,MAAM,mBAAmBI,SAAUA,GACzCN,EAAAA,cAAAA,KAAAA,KAAI,0CACJA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,0BAAI,cAAe,oBACxD,0BAAI,cAAe,gBAAa,0BAAI,YAAa,UAEvDA,EAAAA,cAAAA,IAAAA,KAAG,kCAC8BK,EAAK,uBAAqB,IACxDD,EAAKI,KAAKC,UAAU,KAEvBT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,8ECQX,MA9CgB,KACd,MAAMR,GAAOS,EAAAA,EAAAA,gBAAe,cAiB5B,OACE,yBAAOC,UAAU,kBACf,0BAAI,cACJ,0BACGV,EAAKW,kBAAkBC,MAAMC,KAAIC,GAChC,sBAAIC,IAAKD,EAASE,YAChB,8BAASF,EAASE,YAEjBF,EAASG,cAAcC,OAAS,GAC/B,0BACGJ,EAASG,cAAcJ,KAAIM,GAC1B,sBAAIJ,IAAKI,EAAYH,YACnB,gBAAC,EAAAT,KAAI,CACHC,GAAK,eAAcM,EAASE,WAAWI,iBAAiBD,EAAYH,WAAWI,iBAE9ED,EAAYH,WAAW,KAAGG,EAAYE,WAAW,aAS5D,ECDZ,MAxCe,IAAoC,IAAnC,SAAEnB,EAAQ,MAAEJ,EAAK,SAAEwB,GAAU,EAC3C,MACMC,EADY,MACCrB,EAASsB,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEA,sBAAIb,UAAU,gBACZ,gBAAC,EAAAH,KAAI,CAACC,GAAG,KAAKV,IAKhB,gBAAC,EAAAS,KAAI,CAACG,UAAU,mBAAmBF,GAAG,KACnCV,GAML,uBAAKY,UAAU,iBAAiB,oBAAmBa,GACjD,0BAAQb,UAAU,iBAAiBe,GACnC,wBAAMf,UAAU,eACd,gBAAC,EAAO,MACR,+BAAUY,IAEZ,8BACE,wBACEI,MAAO,CACLC,YAAa,WAEhB,MACI,IAAIC,MAAOC,cAAc,gBAE9B,qBAAGvB,KAAK,4BAA2B,WAEjC,C,+CCEV,IAhCY,IAAuC,IAAD,MAArC,YAAEwB,EAAW,MAAEhC,EAAK,SAAEwB,GAAU,EAC3C,MAAM,KAAElB,IAASK,EAAAA,EAAAA,gBAAe,cAgB1BsB,EAAkBD,GAAe1B,EAAK4B,aAAaF,YACnDG,EAAgC,QAApB,EAAG7B,EAAK4B,oBAAY,aAAjB,EAAmBlC,MAExC,OACE,gCACE,6BAAQmC,EAAgB,GAAEnC,OAAWmC,IAAiBnC,GACtD,wBAAMoC,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASrC,IACnC,wBAAMsC,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YAChCb,EACA,C","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/components/sidebar.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\nconst Sidebar = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: { frontmatter: { category: SELECT } }) {\n          fieldValue\n          totalCount\n          subcategories: group(\n            field: { frontmatter: { subcategory: SELECT } }\n          ) {\n            fieldValue\n            totalCount\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <aside className=\"global-sidebar\">\n      <h3> Category </h3>\n      <ul>\n        {data.allMarkdownRemark.group.map(category => (\n          <li key={category.fieldValue}>\n            <strong>{category.fieldValue}</strong>\n\n            {category.subcategories.length > 0 && (\n              <ul>\n                {category.subcategories.map(subcategory => (\n                  <li key={subcategory.fieldValue}>\n                    <Link\n                      to={`/categories/${category.fieldValue.toLowerCase()}/${subcategory.fieldValue.toLowerCase()}`}\n                    >\n                      {subcategory.fieldValue} ({subcategory.totalCount})\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </li>\n        ))}\n      </ul>\n    </aside>\n  )\n}\n\nexport default Sidebar\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport Sidebar from \"./sidebar\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main className=\"global-main\">\n        <Sidebar />\n        <section>{children}</section>\n      </main>\n      <footer>\n        <span\n          style={{\n            marginRight: \"0.5rem\",\n          }}\n        >\n          Â© {new Date().getFullYear()}, Built with\n        </span>\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              github\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","useStaticQuery","className","allMarkdownRemark","group","map","category","key","fieldValue","subcategories","length","subcategory","toLowerCase","totalCount","children","isRootPath","pathname","header","style","marginRight","Date","getFullYear","description","metaDescription","siteMetadata","defaultTitle","name","content","property"],"sourceRoot":""}