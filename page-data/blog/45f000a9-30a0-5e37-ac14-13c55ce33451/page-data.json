{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/45f000a9-30a0-5e37-ac14-13c55ce33451/","result":{"data":{"site":{"siteMetadata":{"title":"KSoonYo Blog"}},"notionPage":{"title":"[React] Invalid hook call + Cannot read properties of null (reading ‘useState’) Issue: React 버전 미스 매칭 이슈","contentHtml":"<h1><span>참고 사항</span></h1><ul><li><span>회사에서 </span><code><strong><span>shell/sdk</span></strong></code><span> 라는 자체 개발 패키지를 사용 중(사내 플랫폼 연동용 SDK 라이브러리이며 문제의 원인)</span></li><li><span>패키지 매니저: </span><code><span>Yarn berry(v3.4.1)</span></code></li></ul><h1><span>문제</span></h1><ul><li><span>회사에서 자체 개발하여 사용 중인 </span><code><span>shell/sdk</span></code><span> 패키지를 </span><code><span>0.0.18</span></code><span> 에서 </span><code><span>0.0.21</span></code><span> 로 버전 업데이트 후 앱을 실행하면 아래와 같은 오류가 발생</span><img src=\"https://velog.velcdn.com/images/flashsoon/post/f1a6624c-d864-4349-a791-12072157874d/image.png\" alt=\"undefined\" /></li></ul><img src=\"https://velog.velcdn.com/images/flashsoon/post/1da38f0f-1108-44b1-a2c2-33b996596346/image.png\" alt=\"undefined\" /><h1><span>원인</span></h1><ul><li><strong><span>외부 패키지인 shell/sdk와 개발 중인 프로젝트에서 서로 다른 버전의 react를 사용해서 발생한 문제</span></strong></li></ul><img src=\"https://velog.velcdn.com/images/flashsoon/post/f8324da2-5ddb-4c2d-a656-a28a69be579b/image.png\" alt=\"undefined\" /><h1><span>해결 방법</span></h1><ul><li><span>react 패키지를 어떤 버전으로 사용할 것인지 </span><code><span>package.json</span></code><span> 의 resolutions 필드에서 정의해준다.</span><ul><li><span>resolutions 필드에 패키지 버전을 명시하면 프로젝트 내 모든 패키지가 특정 버전을 선택하도록 강제할 수 있다.</span></li></ul></li></ul><pre class=\"language-json\"><code class=\"language-json\"><span>\"resolutions\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n</span></code></pre><p><span>이후에 yarn install을 수행하면, 아래와 같이 </span><code><span>shell/sdk</span></code><span> 의 react 버전이 </span><code><span>focus-fe</span></code><span> 와 동일한 버전으로 설치된다.\nfocus-fe@workspace로 표시된 것으로 알 수 있듯, 현재 팀에서 개발 중인 프로젝트 이름이 focus-fe 이다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/962c7220-57f4-4aef-8373-c68fac363e71/image.png\" alt=\"undefined\" /><p></p><ul><li><span>혹은 </span><code><span>yarn.lock</span></code><span> 파일과 </span><code><span>yarn cache clean</span></code><span> 으로 기존 패키지를 제거하고, 새로 </span><code><span>yarn install</span></code><span> 한다.</span><ul><li><span>이 방식을 선택하면, </span><code><strong><span>focus-fe</span></strong></code><span> 의 react의 패키지 버전이 최신 버전으로 업데이트 된다.</span></li></ul></li></ul><img src=\"https://velog.velcdn.com/images/flashsoon/post/1405eeb2-6b70-4b5d-b15d-d3a0ec0f4dbf/image.png\" alt=\"undefined\" /><p></p><ul><li><span>혹은 그냥 react 버전을 업데이트 해주면 된다.</span></li></ul><p></p><h2><span>심층 원인 파악: 두 방식의 차이는 무엇인가?</span></h2><p><span>→ lock 파일의 존재 의의를 알아야 한다.</span></p><p><a href=\"https://classic.yarnpkg.com/en/docs/yarn-lock/\"><span>https://classic.yarnpkg.com/en/docs/yarn-lock/</span></a></p><p><code><span>yarn.lock</span></code><span> 은 현재 설치된 패키지의 의존성과 패키지 버전을 명시한 파일이다. </span><code><span>package-lock.json</span></code><span> 도 마찬가지</span></p><p><span>문제가 발생하기 이전으로 돌아가 프로젝트의 </span><code><span>yarn.lock</span></code><span>에서 react 버전을 확인해보면 아래와 같다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/b1d355ae-8a6d-41bd-b940-202e418510d6/image.png\" alt=\"undefined\" /><p></p><p><span>프로젝트에서 react는 버전 </span><code><span>18.2.0</span></code><span>으로 설치되어 있다.</span></p><p><span>이제 문제가 발생할 당시의 </span><code><strong><span>@shell/sdk</span></strong></code><span> 의존성을 확인해보았다**.**</span></p><p><code><strong><span>shell/sdk</span></strong></code><strong><span> 의 버전을 </span></strong><code><strong><span>0.0.18</span></strong></code><strong><span> 버전에서 </span></strong><code><strong><span>0.0.21</span></strong></code><strong><span> 버전으로 업데이트한 상황이다.</span></strong></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/30388bf3-696f-4218-b17f-af370e21cc64/image.png\" alt=\"undefined\" /><p></p><p><code><span>react@^18.3.1</span></code><span> 을 의존성으로 명시되어 있다.</span></p><p><span>그리고 lock 파일에서 react를 확인해보면 아래와 같이 두 개 버전의 react가 설치되어 있음을 확인할 수 있다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/82b809e8-bad1-46b8-9077-6f30b1b444b5/image.png\" alt=\"undefined\" /><p></p><p><code><span>yarn cache</span></code><span> 폴더를 확인해보니 이렇게 react@18.3.1 버전의 패키지가 설치되어 있었다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/8862be4c-7f4c-414a-981b-49733a555af9/image.png\" alt=\"undefined\" /><p></p><p><code><span>yarn why react</span></code><span> 로 react 패키지의 의존성 트리를 간략하게 확인해보았다. react의 의존성 버전이 서로 다르다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/ae481276-9d44-4a4e-b568-5c2e7bed7577/image.png\" alt=\"undefined\" /><p><span>이처럼 여러 버전의 react가 있을 경우, </span><strong><span>특정 패키지가 현재 프로젝트와 다른 버전의 react를 참조할 때 충돌이 된다.</span></strong></p><p></p><h3><span>솔루션 분석</span></h3><p><span>이제 yarn.lock 파일을 제거하고 재설치를 진행해보자. install 전에 </span><code><span>yarn cache clean</span></code><span> 도 진행한다.</span></p><p><strong><span>확인해보면 설치된 react 버전이 18.3.1임을 확인할 수 있다.</span></strong></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/43e18d59-baec-46b6-b955-c898b75757f0/image.png\" alt=\"undefined\" /><p></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/21bde7d3-54c3-490a-baa7-4c1df6d0fc83/image.png\" alt=\"undefined\" /><p><span>작성일 기준 가장 최신 react 버전은 18.3.1 이므로, yarn 패키지 매니저가 18 메이저 버전 이내 가장 최신 패키지를 설치했음을 확인할 수 있다.</span></p><p></p><p><a href=\"https://github.com/facebook/react/releases\"><span>https://github.com/facebook/react/releases</span></a></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/a37cacdf-37eb-4291-b9c5-6467ce096433/image.png\" alt=\"undefined\" /><p></p><p><span>yarn은 패키지를 설치할 때, 패키지 종속성과 최신 패키지 버전을 고려하여 설치할 패키지의 버전을 선택한다. </span><code><span>^</span></code><span> 은 메이저 버전은 유지하고 마이너 버전 이하에 대해서만 업데이트 하므로, 최신 버전인 </span><code><span>react@18.3.1</span></code><span> 역시 </span><code><span>^18.2.0</span></code><span> 범위에 해당한다.</span></p><p><span>→ 따라서 lock 파일을 제거하고 yarn install을 수행하면, 패키지 매니저는 프로젝트들의 버전과 종속성을 모두 고려하여 최신 패키지 버전을 resolution 한다.</span></p><p><a href=\"https://www.geeksforgeeks.org/difference-between-tilde-and-caret-in-package-json/\"><span>https://www.geeksforgeeks.org/difference-between-tilde-and-caret-in-package-json/</span></a></p><p></p><p><span>그렇다면 </span><code><span>@shell/sdk</span></code><span> 패키지를 업데이트 했을 때, react 패키지가 업데이트 되지 않고 추가 설치되는 이유는 무엇일까?</span></p><p><strong><span>→ 근본적인 원인은 </span></strong><code><strong><span>@shell/sdk</span></strong></code><strong><span> 패키지를 만든 제작자가 external로 react를 명시하지 않았기 때문이다.</span></strong><span> 따라서 이러한 이슈는 사내 자체 개발한 패키지를 사용하는 등 매우 특수한 상황에서 겪을 수 있는 이슈라고 할 수 있다.</span></p><p></p><p><span>패키지 업데이트 이전에 **</span><code><span>shell/sdk</span></code><span>**가 사용한 react 버전을 확인해보면, </span><code><span>18.2.0</span></code><span>인 것을 알 수 있었다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/1f8ef37d-3234-4789-a147-ac8744cea58b/image.png\" alt=\"undefined\" /><p></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/77d8539e-a4e0-42fb-a244-b4ef5dcd2064/image.png\" alt=\"undefined\" /><p></p><p><span>이제 </span><code><span>yarn up @shell/sdk@0.0.21</span></code><span> 로 업데이트해보았다.</span></p><p><span>fetch step에서 </span><code><span>react@18.3.1</span></code><span>을 새로 설치하고 있음을 콘솔에서 확인 가능하다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/cac8f866-1838-4950-927a-3c3155ad50d0/image.png\" alt=\"undefined\" /><p></p><p><strong><span>이미 기존 프로젝트에서 </span></strong><code><strong><span>react@18.2.0</span></strong></code><strong><span> 을 사용하며 해당 버전의 react를 의존성으로 패키지들이 관리되고 있는 상황에서 새로 업데이트하는 </span></strong><code><strong><span>0.0.21 버전</span></strong></code><strong><span>의 </span></strong><code><strong><span>shell/sdk</span></strong></code><strong><span> 는 18.3.1 react 버전을 의존성으로 하기 때문에 패키지 매니저는 기존 react 버전을 업데이트하는 것이 아닌, 새로운 버전의 react를 추가 설치하고 있는 상황</span></strong><span>이다.</span></p><p><span>프로젝트는 </span><code><span>react@18.2.0</span></code><span>을 필요로 하고, </span><code><span>shell/sdk</span></code><span> 는  </span><code><span>react@18.3.1</span></code><span> 을 필요로 하는 것이다. (즉, 둘 다 필요하다고 패키지 매니저는 인식하고 있다.)</span></p><p><span>다시 강조하지만, 외부 패키지 제작자가 external로 react를 명시해야 했음에도 그러지 않았던 것이 문제의 원인.</span></p><p><code><strong><span>package.json</span></strong></code><strong><span>에서 </span></strong><code><strong><span>resolutions</span></strong></code><strong><span> 필드에 버전을 명시하고 </span></strong><code><strong><span>yarn up @shell/sdk@0.0.21</span></strong></code><strong><span> 를 수행하면 fetch step에서 해당 문구는 사라진다. 이미 </span></strong><code><strong><span>shell/sdk</span></strong></code><strong><span>의 의존성으로 18.2.0 버전의 react가 resolution 되기 때문이다.</span></strong><span>  해당 버전의 react는 이미 cache 에 등록되어 있으므로 새로 설치되지 않는다.</span><strong><span>(이 프로젝트는 Yarn berry를 사용하고 있음에 유의, 패키지 매니저에 따라 패키지 버전을 resolution하는 필드 명이 다르다.)</span></strong></p><p></p><h3><span>정리</span></h3><p><strong><span>package.json에서 resolutions 필드를 이용한 방식은 프로젝트 내 새로운 패키지를 설치하거나 업데이트할 때 해당 패키지의 의존성을 resolutions 필드에서 정의한 버전으로 강제하는 방식이다.</span></strong></p><p><a href=\"https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/\"><span>https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/</span></a></p><p><span>lock 파일 삭제 후 재설치는  프로젝트에서 </span><strong><span>이전에 설치한 패키지들의 버전과 의존성들을 새롭게 변경하여 적용하는 방식이며, 패키지 매니저에 따라 package.json에 명시한 버전 이내 패키지 버전 업데이트도 이루어질 수 있다. 이때</span></strong><span> </span><code><span>yarn.lock</span></code><span> 파일이 변경되었으므로, 해당 커밋을 pull받은 다른 팀원은 yarn install을 수행해야 한다.</span></p>"}},"pageContext":{"id":"45f000a9-30a0-5e37-ac14-13c55ce33451","title":"[React] Invalid hook call + Cannot read properties of null (reading ‘useState’) Issue: React 버전 미스 매칭 이슈","contentHtml":"<h1><span>참고 사항</span></h1><ul><li><span>회사에서 </span><code><strong><span>shell/sdk</span></strong></code><span> 라는 자체 개발 패키지를 사용 중(사내 플랫폼 연동용 SDK 라이브러리이며 문제의 원인)</span></li><li><span>패키지 매니저: </span><code><span>Yarn berry(v3.4.1)</span></code></li></ul><h1><span>문제</span></h1><ul><li><span>회사에서 자체 개발하여 사용 중인 </span><code><span>shell/sdk</span></code><span> 패키지를 </span><code><span>0.0.18</span></code><span> 에서 </span><code><span>0.0.21</span></code><span> 로 버전 업데이트 후 앱을 실행하면 아래와 같은 오류가 발생</span><img src=\"https://velog.velcdn.com/images/flashsoon/post/f1a6624c-d864-4349-a791-12072157874d/image.png\" alt=\"undefined\" /></li></ul><img src=\"https://velog.velcdn.com/images/flashsoon/post/1da38f0f-1108-44b1-a2c2-33b996596346/image.png\" alt=\"undefined\" /><h1><span>원인</span></h1><ul><li><strong><span>외부 패키지인 shell/sdk와 개발 중인 프로젝트에서 서로 다른 버전의 react를 사용해서 발생한 문제</span></strong></li></ul><img src=\"https://velog.velcdn.com/images/flashsoon/post/f8324da2-5ddb-4c2d-a656-a28a69be579b/image.png\" alt=\"undefined\" /><h1><span>해결 방법</span></h1><ul><li><span>react 패키지를 어떤 버전으로 사용할 것인지 </span><code><span>package.json</span></code><span> 의 resolutions 필드에서 정의해준다.</span><ul><li><span>resolutions 필드에 패키지 버전을 명시하면 프로젝트 내 모든 패키지가 특정 버전을 선택하도록 강제할 수 있다.</span></li></ul></li></ul><pre class=\"language-json\"><code class=\"language-json\"><span>\"resolutions\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n</span></code></pre><p><span>이후에 yarn install을 수행하면, 아래와 같이 </span><code><span>shell/sdk</span></code><span> 의 react 버전이 </span><code><span>focus-fe</span></code><span> 와 동일한 버전으로 설치된다.\nfocus-fe@workspace로 표시된 것으로 알 수 있듯, 현재 팀에서 개발 중인 프로젝트 이름이 focus-fe 이다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/962c7220-57f4-4aef-8373-c68fac363e71/image.png\" alt=\"undefined\" /><p></p><ul><li><span>혹은 </span><code><span>yarn.lock</span></code><span> 파일과 </span><code><span>yarn cache clean</span></code><span> 으로 기존 패키지를 제거하고, 새로 </span><code><span>yarn install</span></code><span> 한다.</span><ul><li><span>이 방식을 선택하면, </span><code><strong><span>focus-fe</span></strong></code><span> 의 react의 패키지 버전이 최신 버전으로 업데이트 된다.</span></li></ul></li></ul><img src=\"https://velog.velcdn.com/images/flashsoon/post/1405eeb2-6b70-4b5d-b15d-d3a0ec0f4dbf/image.png\" alt=\"undefined\" /><p></p><ul><li><span>혹은 그냥 react 버전을 업데이트 해주면 된다.</span></li></ul><p></p><h2><span>심층 원인 파악: 두 방식의 차이는 무엇인가?</span></h2><p><span>→ lock 파일의 존재 의의를 알아야 한다.</span></p><p><a href=\"https://classic.yarnpkg.com/en/docs/yarn-lock/\"><span>https://classic.yarnpkg.com/en/docs/yarn-lock/</span></a></p><p><code><span>yarn.lock</span></code><span> 은 현재 설치된 패키지의 의존성과 패키지 버전을 명시한 파일이다. </span><code><span>package-lock.json</span></code><span> 도 마찬가지</span></p><p><span>문제가 발생하기 이전으로 돌아가 프로젝트의 </span><code><span>yarn.lock</span></code><span>에서 react 버전을 확인해보면 아래와 같다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/b1d355ae-8a6d-41bd-b940-202e418510d6/image.png\" alt=\"undefined\" /><p></p><p><span>프로젝트에서 react는 버전 </span><code><span>18.2.0</span></code><span>으로 설치되어 있다.</span></p><p><span>이제 문제가 발생할 당시의 </span><code><strong><span>@shell/sdk</span></strong></code><span> 의존성을 확인해보았다**.**</span></p><p><code><strong><span>shell/sdk</span></strong></code><strong><span> 의 버전을 </span></strong><code><strong><span>0.0.18</span></strong></code><strong><span> 버전에서 </span></strong><code><strong><span>0.0.21</span></strong></code><strong><span> 버전으로 업데이트한 상황이다.</span></strong></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/30388bf3-696f-4218-b17f-af370e21cc64/image.png\" alt=\"undefined\" /><p></p><p><code><span>react@^18.3.1</span></code><span> 을 의존성으로 명시되어 있다.</span></p><p><span>그리고 lock 파일에서 react를 확인해보면 아래와 같이 두 개 버전의 react가 설치되어 있음을 확인할 수 있다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/82b809e8-bad1-46b8-9077-6f30b1b444b5/image.png\" alt=\"undefined\" /><p></p><p><code><span>yarn cache</span></code><span> 폴더를 확인해보니 이렇게 react@18.3.1 버전의 패키지가 설치되어 있었다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/8862be4c-7f4c-414a-981b-49733a555af9/image.png\" alt=\"undefined\" /><p></p><p><code><span>yarn why react</span></code><span> 로 react 패키지의 의존성 트리를 간략하게 확인해보았다. react의 의존성 버전이 서로 다르다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/ae481276-9d44-4a4e-b568-5c2e7bed7577/image.png\" alt=\"undefined\" /><p><span>이처럼 여러 버전의 react가 있을 경우, </span><strong><span>특정 패키지가 현재 프로젝트와 다른 버전의 react를 참조할 때 충돌이 된다.</span></strong></p><p></p><h3><span>솔루션 분석</span></h3><p><span>이제 yarn.lock 파일을 제거하고 재설치를 진행해보자. install 전에 </span><code><span>yarn cache clean</span></code><span> 도 진행한다.</span></p><p><strong><span>확인해보면 설치된 react 버전이 18.3.1임을 확인할 수 있다.</span></strong></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/43e18d59-baec-46b6-b955-c898b75757f0/image.png\" alt=\"undefined\" /><p></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/21bde7d3-54c3-490a-baa7-4c1df6d0fc83/image.png\" alt=\"undefined\" /><p><span>작성일 기준 가장 최신 react 버전은 18.3.1 이므로, yarn 패키지 매니저가 18 메이저 버전 이내 가장 최신 패키지를 설치했음을 확인할 수 있다.</span></p><p></p><p><a href=\"https://github.com/facebook/react/releases\"><span>https://github.com/facebook/react/releases</span></a></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/a37cacdf-37eb-4291-b9c5-6467ce096433/image.png\" alt=\"undefined\" /><p></p><p><span>yarn은 패키지를 설치할 때, 패키지 종속성과 최신 패키지 버전을 고려하여 설치할 패키지의 버전을 선택한다. </span><code><span>^</span></code><span> 은 메이저 버전은 유지하고 마이너 버전 이하에 대해서만 업데이트 하므로, 최신 버전인 </span><code><span>react@18.3.1</span></code><span> 역시 </span><code><span>^18.2.0</span></code><span> 범위에 해당한다.</span></p><p><span>→ 따라서 lock 파일을 제거하고 yarn install을 수행하면, 패키지 매니저는 프로젝트들의 버전과 종속성을 모두 고려하여 최신 패키지 버전을 resolution 한다.</span></p><p><a href=\"https://www.geeksforgeeks.org/difference-between-tilde-and-caret-in-package-json/\"><span>https://www.geeksforgeeks.org/difference-between-tilde-and-caret-in-package-json/</span></a></p><p></p><p><span>그렇다면 </span><code><span>@shell/sdk</span></code><span> 패키지를 업데이트 했을 때, react 패키지가 업데이트 되지 않고 추가 설치되는 이유는 무엇일까?</span></p><p><strong><span>→ 근본적인 원인은 </span></strong><code><strong><span>@shell/sdk</span></strong></code><strong><span> 패키지를 만든 제작자가 external로 react를 명시하지 않았기 때문이다.</span></strong><span> 따라서 이러한 이슈는 사내 자체 개발한 패키지를 사용하는 등 매우 특수한 상황에서 겪을 수 있는 이슈라고 할 수 있다.</span></p><p></p><p><span>패키지 업데이트 이전에 **</span><code><span>shell/sdk</span></code><span>**가 사용한 react 버전을 확인해보면, </span><code><span>18.2.0</span></code><span>인 것을 알 수 있었다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/1f8ef37d-3234-4789-a147-ac8744cea58b/image.png\" alt=\"undefined\" /><p></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/77d8539e-a4e0-42fb-a244-b4ef5dcd2064/image.png\" alt=\"undefined\" /><p></p><p><span>이제 </span><code><span>yarn up @shell/sdk@0.0.21</span></code><span> 로 업데이트해보았다.</span></p><p><span>fetch step에서 </span><code><span>react@18.3.1</span></code><span>을 새로 설치하고 있음을 콘솔에서 확인 가능하다.</span></p><img src=\"https://velog.velcdn.com/images/flashsoon/post/cac8f866-1838-4950-927a-3c3155ad50d0/image.png\" alt=\"undefined\" /><p></p><p><strong><span>이미 기존 프로젝트에서 </span></strong><code><strong><span>react@18.2.0</span></strong></code><strong><span> 을 사용하며 해당 버전의 react를 의존성으로 패키지들이 관리되고 있는 상황에서 새로 업데이트하는 </span></strong><code><strong><span>0.0.21 버전</span></strong></code><strong><span>의 </span></strong><code><strong><span>shell/sdk</span></strong></code><strong><span> 는 18.3.1 react 버전을 의존성으로 하기 때문에 패키지 매니저는 기존 react 버전을 업데이트하는 것이 아닌, 새로운 버전의 react를 추가 설치하고 있는 상황</span></strong><span>이다.</span></p><p><span>프로젝트는 </span><code><span>react@18.2.0</span></code><span>을 필요로 하고, </span><code><span>shell/sdk</span></code><span> 는  </span><code><span>react@18.3.1</span></code><span> 을 필요로 하는 것이다. (즉, 둘 다 필요하다고 패키지 매니저는 인식하고 있다.)</span></p><p><span>다시 강조하지만, 외부 패키지 제작자가 external로 react를 명시해야 했음에도 그러지 않았던 것이 문제의 원인.</span></p><p><code><strong><span>package.json</span></strong></code><strong><span>에서 </span></strong><code><strong><span>resolutions</span></strong></code><strong><span> 필드에 버전을 명시하고 </span></strong><code><strong><span>yarn up @shell/sdk@0.0.21</span></strong></code><strong><span> 를 수행하면 fetch step에서 해당 문구는 사라진다. 이미 </span></strong><code><strong><span>shell/sdk</span></strong></code><strong><span>의 의존성으로 18.2.0 버전의 react가 resolution 되기 때문이다.</span></strong><span>  해당 버전의 react는 이미 cache 에 등록되어 있으므로 새로 설치되지 않는다.</span><strong><span>(이 프로젝트는 Yarn berry를 사용하고 있음에 유의, 패키지 매니저에 따라 패키지 버전을 resolution하는 필드 명이 다르다.)</span></strong></p><p></p><h3><span>정리</span></h3><p><strong><span>package.json에서 resolutions 필드를 이용한 방식은 프로젝트 내 새로운 패키지를 설치하거나 업데이트할 때 해당 패키지의 의존성을 resolutions 필드에서 정의한 버전으로 강제하는 방식이다.</span></strong></p><p><a href=\"https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/\"><span>https://classic.yarnpkg.com/lang/en/docs/selective-version-resolutions/</span></a></p><p><span>lock 파일 삭제 후 재설치는  프로젝트에서 </span><strong><span>이전에 설치한 패키지들의 버전과 의존성들을 새롭게 변경하여 적용하는 방식이며, 패키지 매니저에 따라 package.json에 명시한 버전 이내 패키지 버전 업데이트도 이루어질 수 있다. 이때</span></strong><span> </span><code><span>yarn.lock</span></code><span> 파일이 변경되었으므로, 해당 커밋을 pull받은 다른 팀원은 yarn install을 수행해야 한다.</span></p>"}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}